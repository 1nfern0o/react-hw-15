{"version":3,"sources":["Components/Post/images/verified.svg","Components/Post/images/comments.svg","Components/Post/images/share.svg","Components/Post/images/like.svg","Components/Post/images/send.svg","Components/Post/images/down-arrow.svg","vader.jpg","comm_vader.jpg","Components/Post/post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Posts","props","console","log","className","src","author","photo","alt","name","verified","nickname","date","downArrow","content","image","comments","share","like","send","App","vader","commVader","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,+PC0D5BC,EAjDD,SAACC,GAEX,OADAC,QAAQC,IAAIF,GAER,yBAAKG,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,YAAYC,IAAKJ,EAAMK,OAAOC,MAAOC,IAAI,YAE5D,yBAAKJ,UAAU,cACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,qBAEX,4BAAQA,UAAU,qBAAqBH,EAAMK,OAAOG,MACpD,yBAAKL,UAAU,wBAAwBC,IAAKK,IAAUF,IAAI,aAC1D,0BAAMJ,UAAU,yBAAyBH,EAAMK,OAAOK,UACtD,0BAAMP,UAAU,qBAAqBH,EAAMW,OAG/C,yBAAKR,UAAU,qBACX,yBAAKA,UAAU,aAAaC,IAAKQ,IAAWL,IAAI,iBAGxD,yBAAKJ,UAAU,WACX,uBAAGA,UAAU,iBAAiBH,EAAMa,SACpC,yBAAKV,UAAU,eAAeC,IAAKJ,EAAMc,MAAOP,IAAI,gBACpD,yBAAKJ,UAAU,SACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,0BAA0BC,IAAKW,IAAUR,IAAI,KAC5D,sCAEJ,yBAAKJ,UAAU,cACX,yBAAKA,UAAU,uBAAuBC,IAAKY,IAAOT,IAAI,KACtD,sCAEJ,yBAAKJ,UAAU,cACX,yBAAKA,UAAU,sBAAsBC,IAAKa,IAAMV,IAAI,KACpD,sCAEJ,yBAAKJ,UAAU,cACX,yBAAKA,UAAU,sBAAsBC,IAAKc,IAAMX,IAAI,Y,iCCErEY,MA1Bf,WACE,OACI,6BACE,kBAAC,EAAD,CAAOd,OAAQ,CACbG,KAAM,mBACNF,MAxBW,6FAyBXI,SAAU,eAELG,QAAQ,kDACRC,MA1BG,gGA2BHH,KAAM,iCAEX,kBAAC,EAAD,CAAON,OAAQ,CACXG,KAAM,wBACNF,MAAOc,IACPV,SAAU,eAEPG,QAAQ,yFACRC,MAAOO,IACPV,KAAM,6BC/BHW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.ebe7a9eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/verified.c9a1728d.svg\";","module.exports = __webpack_public_path__ + \"static/media/comments.b89805e1.svg\";","module.exports = __webpack_public_path__ + \"static/media/share.bd40ebf4.svg\";","module.exports = __webpack_public_path__ + \"static/media/like.7746f5e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/send.8b6117db.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.7478f015.svg\";","module.exports = __webpack_public_path__ + \"static/media/vader.2182b812.jpg\";","module.exports = __webpack_public_path__ + \"static/media/comm_vader.5cf6a97a.jpg\";","import React from \"react\";\r\nimport \"./post.css\";\r\nimport verified from \"./images/verified.svg\";\r\nimport comments from \"./images/comments.svg\";\r\nimport share from \"./images/share.svg\";\r\nimport like from \"./images/like.svg\";\r\nimport send from \"./images/send.svg\";\r\nimport downArrow from \"./images/down-arrow.svg\";\r\n\r\nconst Posts = (props) => {\r\n    console.log(props)\r\n    return(\r\n        <div className=\"post\">\r\n            <div className=\"post__wrapper\">\r\n                <div className=\"post__item\">\r\n                    <img className=\"post__img\" src={props.author.photo} alt=\"avatar\"/>\r\n                </div>\r\n                <div className=\"post__item\">\r\n                    <div className=\"blocks-info\">\r\n                        <div className=\"blocks-info__item\">\r\n\r\n                            <strong className=\"blocks-info__name\">{props.author.name}</strong>\r\n                            <img className=\"blocks-info__verified\" src={verified} alt=\"verified\"/>\r\n                            <span className=\"blocks-info__nickname\">{props.author.nickname}</span>\r\n                            <span className=\"blocks-info__date\">{props.date}</span>\r\n                        </div>\r\n\r\n                        <div className=\"blocks-info__item\">\r\n                            <img className=\"arrow-down\" src={downArrow} alt=\"arrow-down\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <p className=\"content__text\">{props.content}</p>\r\n                        <img className=\"content__img\" src={props.image} alt=\"content img\"/>\r\n                        <div className=\"icons\">\r\n                            <div className=\"icon__item\">\r\n                                <img className=\"icon__img comments__img\" src={comments} alt=\"\"/>\r\n                                <span>482</span>\r\n                            </div>\r\n                            <div className=\"icon__item\">\r\n                                <img className=\"icon__img share__img\" src={share} alt=\"\"/>\r\n                                <span>146</span>\r\n                            </div>\r\n                            <div className=\"icon__item\">\r\n                                <img className=\"icon__img like__img\" src={like} alt=\"\"/>\r\n                                <span>887</span>\r\n                            </div>\r\n                            <div className=\"icon__item\">\r\n                                <img className=\"icon__img send__img\" src={send} alt=\"\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Posts;","import React from 'react';\nimport Posts from \"./Components/Post/post\";\nimport vader from \"./vader.jpg\";\nimport commVader from \"./comm_vader.jpg\";\n\nconst ANAKIN_IMAGE = \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\n\nconst RAY_IMAGE = \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\n\n\n/*const POST_LIST = [\n  {\n    author: {\n      name: \"Anakin skywalker\",\n      photo: ANAKIN_IMAGE,\n      nickname: \"@dart_vader\"\n    },\n    content: \"WTF? Who is Ray? Why she is Skywalker? Luke...?\",\n    image: {RAY_IMAGE},\n    date: \"26 февр.\"\n  }\n];*/\n\n\nfunction App() {\n  return (\n      <div>\n        <Posts author={{\n          name: \"Anakin skywalker\",\n          photo: ANAKIN_IMAGE,\n          nickname: \"@dart_vader\"\n        }}\n               content=\"WTF? Who is Ray? Why she is Skywalker? Luke...?\"\n               image={RAY_IMAGE}\n               date={\"26 февр.\"}\n        />\n          <Posts author={{\n              name: \"Twin Anakin skywalker\",\n              photo: vader,\n              nickname: \"@dart_vader\"\n          }}\n                 content=\"Darth Vader is a fictional character in the Star Wars franchise. Born Anakin Skywalker\"\n                 image={commVader}\n                 date={\"20 янв.\"}\n          />\n        {/* { POST_LIST.map(post => <Posts {...post}/>)}*/}\n      </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}